<?xml version="1.0" encoding="UTF-8"?>

<project name="ProjectName" default="build">
    <!-- add custom tasks from current directory  -->
    <!-- https://github.com/EvanK/phing-ext-gittasks -->
    <taskdef name="gitdescribe"   classname="GitDescribeTask" />
    <taskdef name="gittag"        classname="GitTagTask" />

    <property file="default.properties" />

    <!-- assume our current directory IS the git repo to operate on -->
    <property name="repo.dir" value="${repo}" />
    <resolvepath propertyName="repo.dir.resolved" file="${repo.dir}" />

    <!-- deletes all content inside temp directory -->
    <target name="git.cleanup">
        <echo msg="Trying to clean up temp dir" />
        <delete includeemptydirs="true" quiet="true">
            <fileset dir="${tmpdir}">
                <include name="**/**"/>
            </fileset>
        </delete>
        <mkdir dir="${tmpdir}" />
    </target>

    <!-- Creates a diff since last tagged and copies it to temp directory -->
    <target name="git.creatediff" depends="git.cleanup">
        <exec outputProperty="tagsExist"
              command="git describe --abbrev=0 --tags"
              dir="${repo.dir.resolved}" />
        <if>
            <equals arg1="${tagsExist}" arg2="fatal: No names found, cannot describe anything." />
            <then>
                <fail message="No tags were found. At least one tag is needed for creating diff." />
            </then>
        </if>

        <!-- Gets last tag name -->
        <gitdescribe repository="${repo.dir.resolved}"
                     tags="true"
                     abbrev="0"
                     outputProperty="lastTag" />

        <echo message="last Tag name was: ${lastTag}" />

        <!-- Gets hash of last Tag-->
        <exec outputProperty="lastTagHash"
              command="git rev-parse --verify ${lastTag}"
              dir="${repo.dir.resolved}"/>

        <echo message="Hash of most recent tag ${lastTagHash}" />

        <!-- Gets hash of last Commit-->
        <exec outputProperty="lastCommitHash"
              command="git log --pretty=format:'%H' -n 1"
              dir="${repo.dir.resolved}"/>

        <echo message="Hash of most recent commit ${lastCommitHash}" />

        <!-- TODO: check if diff has something to be copied -->
        <exec outputProperty="filesHaveChanged"
              command="git diff --name-only ${lastTagHash} ${lastCommitHash}"
              dir="${repo.dir.resolved}"/>

        <if>
            <equals arg1="${filesHaveChanged}" arg2="" />
            <then>
                <echo message="There is no diff to be created" />
            </then>
            <else>
                <!-- Created diff -->
                <exec outputProperty="diffCreated"
                      command="cp -pv --parents `git diff --name-only ${lastTagHash} ${lastCommitHash}` ${tmpdir}/ "
                      dir="${repo.dir.resolved}"/>

                <echo message="Diff was created: ${diffCreated}" />
            </else>
        </if>
    </target>

    <!-- Clean folders before upload -->
    <target name="beforesafeupload">
        <echo message="Trying to remove backup folders already present on server" />

        <!-- Removing backup folders -->
        <ssh username="${ssh.username}"
             password="${ssh.password}"
             host="${ssh.host}"
             display="true"
             command="rm -rfv ${ssh.basepath}/${upload.dir.current}" />

        <ssh username="${ssh.username}"
             password="${ssh.password}"
             host="${ssh.host}"
             display="true"
             command="rm -rfv ${ssh.basepath}/${upload.dir.backup}" />

        <!-- Creating backup folders -->
        <ssh username="${ssh.username}"
             password="${ssh.password}"
             host="${ssh.host}"
             display="true"
             command="mkdir -v ${ssh.basepath}/${upload.dir.current}" />

        <ssh username="${ssh.username}"
             password="${ssh.password}"
             host="${ssh.host}"
             display="true"
             command="mkdir -v ${ssh.basepath}/${upload.dir.backup}" />

        <!-- Backing up data -->
        <ssh username="${ssh.username}"
             password="${ssh.password}"
             host="${ssh.host}"
             display="true"
             command="cp -rv ${ssh.basepath}/${upload.dir.to}/* ${ssh.basepath}/${upload.dir.current}" />

        <ssh username="${ssh.username}"
             password="${ssh.password}"
             host="${ssh.host}"
             display="true"
             command="cp -rv ${ssh.basepath}/${upload.dir.to}/* ${ssh.basepath}/${upload.dir.backup}" />
    </target>


    <!-- uploads diff in temp directory to remote site via SCP -->
    <target name="safescpupload" depends="beforesafeupload">
        <echo message="Uploading diff from ${uploadfromdir} locally to ${upload.dir.current} on ${ftpserver} " />

        <scp
            host     = "${scpserver}"
            port     = "${scpport}"
            username = "${scpusername}"
            password = "${scppassword}"
            todir    = "${upload.dir.current}"
            level    = "${scplevel}"
            >
            <fileset dir="${uploadfromdir}">
                <include name="**"/>
                <exclude name="**/*.properties" />
                <exclude name="**/build.xml" />
            </fileset>
        </scp>

        <echo message="Uploading diff from ${uploadfromdir} to ${scpserver} in ${scpuploaddir}" />
    </target>


    <!-- uploads diff in temp directory to remote site via SCP -->
    <target name="scpupload">
        <echo message="Uploading diff from ${tmpdir} to ${scpserver} in ${scpuploaddir}" />

        <scp
            host     = "${scpserver}"
            port     = "${scpport}"
            username = "${scpusername}"
            password = "${scppassword}"
            todir    = "${scpuploaddir}"
            level    = "${scplevel}"
            >
            <fileset dir="${uploadfromdir}">
                <include name="**"/>
                <exclude name="**/*.properties" />
                <exclude name="**/build.xml" />
            </fileset>
        </scp>

        <echo message="Uploading diff from ${uploadfromdir} to ${scpserver} in ${scpuploaddir}" />
    </target>


    <!-- SAFE FTP uploaad-->
    <target name="safeftpupload" depends="beforesafeupload">
        <echo message="Uploading diff from ${uploadfromdir} locally to ${upload.dir.current} on ${ftpserver} " />

        <!-- uploading via ftp -->
        <ftpdeploy
            host     = "${ftpserver}"
            port     = "${ftpport}"
            username = "${ftpusername}"
            password = "${ftppassword}"
            dir      = "${upload.dir.current}"
            level    = "${ftperrlevel}"
            passive  = "true"
            >
            <fileset dir="${uploadfromdir}">
                <include name="**"/>
                <exclude name="**/*.properties" />
                <exclude name="**/build.xml" />
            </fileset>
        </ftpdeploy>

        <echo message="Successfully uploaded diff from ${uploadfromdir} to ${ftpserver} in ${ftpuploaddir}" />
    </target>


    <!-- uploads diff in temp directory to remote site via FTP -->
    <target name="ftpupload">
        <echo message="Uploading diff from ${uploadfromdir} to ${ftpserver} in ${ftpuploaddir}" />

        <!-- uploading via ftp -->
        <ftpdeploy
            host     = "${ftpserver}"
            port     = "${ftpport}"
            username = "${ftpusername}"
            password = "${ftppassword}"
            dir      = "${ftpuploaddir}"
            level    = "${ftperrlevel}"
            passive  = "true"
            >
            <fileset dir="${uploadfromdir}">
                <include name="**"/>
                <exclude name="**/*.properties" />
                <exclude name="**/build.xml" />
            </fileset>
        </ftpdeploy>

        <echo message="Successfully uploaded diff from ${uploadfromdir} to ${ftpserver} in ${ftpuploaddir}" />
    </target>


    <!-- In case of safe upload, activates uploaded changes -->
    <target name="git.safeupgrade">
        <!-- rename main folder as delete folder -->
        <ssh username="${ssh.username}"
             password="${ssh.password}"
             host="${ssh.host}"
             display="true"
             command="mv -v ${ssh.basepath}/${upload.dir.to} ${ssh.basepath}/${upload.dir.delete}" />

        <!-- rename current folder as main folder -->
        <ssh username="${ssh.username}"
             password="${ssh.password}"
             host="${ssh.host}"
             display="true"
             command="mv -v ${ssh.basepath}/${upload.dir.current} ${ssh.basepath}/${upload.dir.to}" />
    </target>


    <!-- In case of safe upload, rollbacks uploaded changes -->
    <target name="git.safedowngrade">
        <!-- rolling back changes -->
        <ssh username="${ssh.username}"
             password="${ssh.password}"
             host="${ssh.host}"
             display="true"
             command="mv -v ${ssh.basepath}/${upload.dir.to} ${ssh.basepath}/${upload.dir.current}" />

        <!-- reactivating backup -->
        <ssh username="${ssh.username}"
             password="${ssh.password}"
             host="${ssh.host}"
             display="true"
             command="mv -v ${ssh.basepath}/${upload.dir.delete} ${ssh.basepath}/${upload.dir.to}" />

    </target>


    <!-- In case of safe upload, rollbacks uploaded changes -->
    <target name="git.saferemovebackups">
        <!-- removing current folder -->
        <ssh username="${ssh.username}"
             password="${ssh.password}"
             host="${ssh.host}"
             display="true"
             command="rm -rfv ${ssh.basepath}/${upload.dir.current}" />

        <!-- removin delete folder -->
        <ssh username="${ssh.username}"
             password="${ssh.password}"
             host="${ssh.host}"
             display="true"
             command="rm -rfv ${ssh.basepath}/${upload.dir.delete}" />

        <!-- removing backup folder -->
        <ssh username="${ssh.username}"
             password="${ssh.password}"
             host="${ssh.host}"
             display="true"
             command="rm -rfv ${ssh.basepath}/${upload.dir.backup}" />

    </target>


    <!-- creates new svn tags -->
    <target name="git.createtag">
        <exec outputProperty="tagsExist"
              command="git describe --abbrev=0 --tags"
              dir="${repo.dir.resolved}" />

        <if>
            <equals arg1="${tagsExist}" arg2="fatal: No names found, cannot describe anything." />
            <then>
                <!-- asks user to add new tag name -->
                <propertyprompt propertyName = "newTag"
                                promptText   = "Please name new tag: "/>
            </then>
            <else>
                <!-- Gets last tag name -->
                <gitdescribe repository="${repo.dir.resolved}"
                             tags="true"
                             abbrev="0"
                             outputProperty="lastTag" />

                <!-- asks user to add new tag name -->
                <propertyprompt propertyName = "newTag"
                                promptText   = "last Tag name was: ${lastTag} Please name new tag: " />
            </else>
        </if>

        <!-- If tag name was empty, exits with error message -->
        <if>
            <equals arg1="${newTag}" arg2="" />
            <then>
                <echo message="New tag name was empty, exiting without creating a new tag." />
            </then>
            <else>
                <echo message="Creating a new tag: ${newTag}" />
                <gittag repository="${repo.dir.resolved}"
                        annotate="true"
                        message="Creating new tag ${newTag}"
                        name="${newTag}" />
            </else>
        </if>


    </target>

    <!-- default target - displays list of all targets -->
    <target name="git.build">
        <echo message="Use following commands in sequence:" />
        <echo message="-------- Normal Uploading--------" />
        <echo message="1. phing creatediff" />
        <echo message="2. phing ftpupload OR phing scpupload" />
        <echo message="3. phing createtag" />
        <echo message="-------- SAFE Uploading--------" />
        <echo message="Use following commands in sequence for Safe uploading:" />
        <echo message="1. phing creatediff" />
        <echo message="2. phing safeftpupload OR phing safescpupload" />
        <echo message="3. phing safeupgrade" />
        <echo message="4. phing safedowngrade (for rollbacking changes if something goes wrong)" />
        <echo message="5. phing saferemovebackups (will remove all temporary/backup folders on server)" />
        <echo message="6. phing createtag" />
    </target>

</project>
